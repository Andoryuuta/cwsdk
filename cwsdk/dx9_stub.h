#pragma once

struct IDirect3DDevice9_VTable
{
	void *QueryInterface;
	void *AddRef;
	void *Release;
	void *TestCooperativeLevel;
	void *GetAvailableTextureMem;
	void *EvictManagedResources;
	void *GetDirect3D;
	void *GetDeviceCaps;
	void *GetDisplayMode;
	void *GetCreationParameters;
	void *SetCursorProperties;
	void *SetCursorPosition;
	void *ShowCursor;
	void *CreateAdditionalSwapChain;
	void *GetSwapChain;
	void *GetNumberOfSwapChains;
	void *Reset;
	void *Present;
	void *GetBackBuffer;
	void *GetRasterStatus;
	void *SetDialogBoxMode;
	void *SetGammaRamp;
	void *GetGammaRamp;
	void *CreateTexture;
	void *CreateVolumeTexture;
	void *CreateCubeTexture;
	void *CreateVertexBuffer;
	void *CreateIndexBuffer;
	void *CreateRenderTarget;
	void *CreateDepthStencilSurface;
	void *UpdateSurface;
	void *UpdateTexture;
	void *GetRenderTargetData;
	void *GetFrontBufferData;
	void *StretchRect;
	void *ColorFill;
	void *CreateOffscreenPlainSurface;
	void *SetRenderTarget;
	void *GetRenderTarget;
	void *SetDepthStencilSurface;
	void *GetDepthStencilSurface;
	void *BeginScene;
	void *EndScene;
	void *Clear;
	void *SetTransform;
	void *GetTransform;
	void *MultiplyTransform;
	void *SetViewport;
	void *GetViewport;
	void *SetMaterial;
	void *GetMaterial;
	void *SetLight;
	void *GetLight;
	void *LightEnable;
	void *GetLightEnable;
	void *SetClipPlane;
	void *GetClipPlane;
	void *SetRenderState;
	void *GetRenderState;
	void *CreateStateBlock;
	void *BeginStateBlock;
	void *EndStateBlock;
	void *SetClipStatus;
	void *GetClipStatus;
	void *GetTexture;
	void *SetTexture;
	void *GetTextureStageState;
	void *SetTextureStageState;
	void *GetSamplerState;
	void *SetSamplerState;
	void *ValidateDevice;
	void *SetPaletteEntries;
	void *GetPaletteEntries;
	void *SetCurrentTexturePalette;
	void *GetCurrentTexturePalette;
	void *SetScissorRect;
	void *GetScissorRect;
	void *SetSoftwareVertexProcessing;
	void *GetSoftwareVertexProcessing;
	void *SetNPatchMode;
	void *GetNPatchMode;
	void *DrawPrimitive;
	void *DrawIndexedPrimitive;
	void *DrawPrimitiveUP;
	void *DrawIndexedPrimitiveUP;
	void *ProcessVertices;
	void *CreateVertexDeclaration;
	void *SetVertexDeclaration;
	void *GetVertexDeclaration;
	void *SetFVF;
	void *GetFVF;
	void *CreateVertexShader;
	void *SetVertexShader;
	void *GetVertexShader;
	void *SetVertexShaderConstantF;
	void *GetVertexShaderConstantF;
	void *SetVertexShaderConstantI;
	void *GetVertexShaderConstantI;
	void *SetVertexShaderConstantB;
	void *GetVertexShaderConstantB;
	void *SetStreamSource;
	void *GetStreamSource;
	void *SetStreamSourceFreq;
	void *GetStreamSourceFreq;
	void *SetIndices;
	void *GetIndices;
	void *CreatePixelShader;
	void *SetPixelShader;
	void *GetPixelShader;
	void *SetPixelShaderConstantF;
	void *GetPixelShaderConstantF;
	void *SetPixelShaderConstantI;
	void *GetPixelShaderConstantI;
	void *SetPixelShaderConstantB;
	void *GetPixelShaderConstantB;
	void *DrawRectPatch;
	void *DrawTriPatch;
	void *DeletePatch;
	void *CreateQuery;
	void *SetConvolutionMonoKernel;
	void *ComposeRects;
	void *PresentEx;
	void *GetGPUThreadPriority;
	void *SetGPUThreadPriority;
	void *WaitForVBlank;
	void *CheckResourceResidency;
	void *SetMaximumFrameLatency;
	void *GetMaximumFrameLatency;
	void *CheckDeviceState;
	void *CreateRenderTargetEx;
	void *CreateOffscreenPlainSurfaceEx;
	void *CreateDepthStencilSurfaceEx;
	void *ResetEx;
	void *GetDisplayModeEx;
};


// Properly add dx9 later.
//typedef void* LPDIRECT3DDEVICE9;
#include <d3d9.h>
